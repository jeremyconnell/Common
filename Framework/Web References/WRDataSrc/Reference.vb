'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WRDataSrc
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WSDataSrcSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WSDataSrc
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ExecuteDatasetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteScalarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteNonQueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SqlToListAllTablesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllTableNamesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BulkSaveDeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOrdinalsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PagingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PagingWithFiltersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BulkSelectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Framework.My.MySettings.Default.AbstractionLayer_WRDataSrc_WSDataSrc
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ExecuteDatasetCompleted As ExecuteDatasetCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteScalarCompleted As ExecuteScalarCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteNonQueryCompleted As ExecuteNonQueryCompletedEventHandler
        
        '''<remarks/>
        Public Event SqlToListAllTablesCompleted As SqlToListAllTablesCompletedEventHandler
        
        '''<remarks/>
        Public Event AllTableNamesCompleted As AllTableNamesCompletedEventHandler
        
        '''<remarks/>
        Public Event BulkSaveDeleteCompleted As BulkSaveDeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCompleted As DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertCompleted As InsertCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectCompleted As SelectCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectCountCompleted As SelectCountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCompleted As UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOrdinalsCompleted As UpdateOrdinalsCompletedEventHandler
        
        '''<remarks/>
        Public Event PagingCompleted As PagingCompletedEventHandler
        
        '''<remarks/>
        Public Event PagingWithFiltersCompleted As PagingWithFiltersCompletedEventHandler
        
        '''<remarks/>
        Public Event BulkSelectCompleted As BulkSelectCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteDataset", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteDataset(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ExecuteDataset", New Object() {data})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteDatasetAsync(ByVal data() As Byte)
            Me.ExecuteDatasetAsync(data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteDatasetAsync(ByVal data() As Byte, ByVal userState As Object)
            If (Me.ExecuteDatasetOperationCompleted Is Nothing) Then
                Me.ExecuteDatasetOperationCompleted = AddressOf Me.OnExecuteDatasetOperationCompleted
            End If
            Me.InvokeAsync("ExecuteDataset", New Object() {data}, Me.ExecuteDatasetOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteDatasetOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteDatasetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteDatasetCompleted(Me, New ExecuteDatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteScalar", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteScalar(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ExecuteScalar", New Object() {data})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteScalarAsync(ByVal data() As Byte)
            Me.ExecuteScalarAsync(data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteScalarAsync(ByVal data() As Byte, ByVal userState As Object)
            If (Me.ExecuteScalarOperationCompleted Is Nothing) Then
                Me.ExecuteScalarOperationCompleted = AddressOf Me.OnExecuteScalarOperationCompleted
            End If
            Me.InvokeAsync("ExecuteScalar", New Object() {data}, Me.ExecuteScalarOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteScalarOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteScalarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteScalarCompleted(Me, New ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteNonQuery", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteNonQuery(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ExecuteNonQuery", New Object() {data})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteNonQueryAsync(ByVal data() As Byte)
            Me.ExecuteNonQueryAsync(data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteNonQueryAsync(ByVal data() As Byte, ByVal userState As Object)
            If (Me.ExecuteNonQueryOperationCompleted Is Nothing) Then
                Me.ExecuteNonQueryOperationCompleted = AddressOf Me.OnExecuteNonQueryOperationCompleted
            End If
            Me.InvokeAsync("ExecuteNonQuery", New Object() {data}, Me.ExecuteNonQueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteNonQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteNonQueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteNonQueryCompleted(Me, New ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SqlToListAllTables", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SqlToListAllTables() As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("SqlToListAllTables", New Object(-1) {})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SqlToListAllTablesAsync()
            Me.SqlToListAllTablesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SqlToListAllTablesAsync(ByVal userState As Object)
            If (Me.SqlToListAllTablesOperationCompleted Is Nothing) Then
                Me.SqlToListAllTablesOperationCompleted = AddressOf Me.OnSqlToListAllTablesOperationCompleted
            End If
            Me.InvokeAsync("SqlToListAllTables", New Object(-1) {}, Me.SqlToListAllTablesOperationCompleted, userState)
        End Sub
        
        Private Sub OnSqlToListAllTablesOperationCompleted(ByVal arg As Object)
            If (Not (Me.SqlToListAllTablesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SqlToListAllTablesCompleted(Me, New SqlToListAllTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AllTableNames", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllTableNames() As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("AllTableNames", New Object(-1) {})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllTableNamesAsync()
            Me.AllTableNamesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllTableNamesAsync(ByVal userState As Object)
            If (Me.AllTableNamesOperationCompleted Is Nothing) Then
                Me.AllTableNamesOperationCompleted = AddressOf Me.OnAllTableNamesOperationCompleted
            End If
            Me.InvokeAsync("AllTableNames", New Object(-1) {}, Me.AllTableNamesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllTableNamesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllTableNamesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllTableNamesCompleted(Me, New AllTableNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BulkSaveDelete", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub BulkSaveDelete(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal s() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal d() As Byte)
            Me.Invoke("BulkSaveDelete", New Object() {s, d})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BulkSaveDeleteAsync(ByVal s() As Byte, ByVal d() As Byte)
            Me.BulkSaveDeleteAsync(s, d, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BulkSaveDeleteAsync(ByVal s() As Byte, ByVal d() As Byte, ByVal userState As Object)
            If (Me.BulkSaveDeleteOperationCompleted Is Nothing) Then
                Me.BulkSaveDeleteOperationCompleted = AddressOf Me.OnBulkSaveDeleteOperationCompleted
            End If
            Me.InvokeAsync("BulkSaveDelete", New Object() {s, d}, Me.BulkSaveDeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnBulkSaveDeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.BulkSaveDeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BulkSaveDeleteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal w() As Byte) As Integer
            Dim results() As Object = Me.Invoke("Delete", New Object() {w})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal w() As Byte)
            Me.DeleteAsync(w, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal w() As Byte, ByVal userState As Object)
            If (Me.DeleteOperationCompleted Is Nothing) Then
                Me.DeleteOperationCompleted = AddressOf Me.OnDeleteOperationCompleted
            End If
            Me.InvokeAsync("Delete", New Object() {w}, Me.DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCompleted(Me, New DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal t() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal p() As Byte, ByVal insertPk As Boolean, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal d() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal s() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Insert", New Object() {t, p, insertPk, d, s})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertAsync(ByVal t() As Byte, ByVal p() As Byte, ByVal insertPk As Boolean, ByVal d() As Byte, ByVal s() As Byte)
            Me.InsertAsync(t, p, insertPk, d, s, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertAsync(ByVal t() As Byte, ByVal p() As Byte, ByVal insertPk As Boolean, ByVal d() As Byte, ByVal s() As Byte, ByVal userState As Object)
            If (Me.InsertOperationCompleted Is Nothing) Then
                Me.InsertOperationCompleted = AddressOf Me.OnInsertOperationCompleted
            End If
            Me.InvokeAsync("Insert", New Object() {t, p, insertPk, d, s}, Me.InsertOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertCompleted(Me, New InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Select", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function [Select](<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal w() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Select", New Object() {w})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectAsync(ByVal w() As Byte)
            Me.SelectAsync(w, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectAsync(ByVal w() As Byte, ByVal userState As Object)
            If (Me.SelectOperationCompleted Is Nothing) Then
                Me.SelectOperationCompleted = AddressOf Me.OnSelectOperationCompleted
            End If
            Me.InvokeAsync("Select", New Object() {w}, Me.SelectOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectCompleted(Me, New SelectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectCount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectCount(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal w() As Byte) As Integer
            Dim results() As Object = Me.Invoke("SelectCount", New Object() {w})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectCountAsync(ByVal w() As Byte)
            Me.SelectCountAsync(w, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectCountAsync(ByVal w() As Byte, ByVal userState As Object)
            If (Me.SelectCountOperationCompleted Is Nothing) Then
                Me.SelectCountOperationCompleted = AddressOf Me.OnSelectCountOperationCompleted
            End If
            Me.InvokeAsync("SelectCount", New Object() {w}, Me.SelectCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectCountCompleted(Me, New SelectCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal nv() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal w() As Byte) As Integer
            Dim results() As Object = Me.Invoke("Update", New Object() {nv, w})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal nv() As Byte, ByVal w() As Byte)
            Me.UpdateAsync(nv, w, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAsync(ByVal nv() As Byte, ByVal w() As Byte, ByVal userState As Object)
            If (Me.UpdateOperationCompleted Is Nothing) Then
                Me.UpdateOperationCompleted = AddressOf Me.OnUpdateOperationCompleted
            End If
            Me.InvokeAsync("Update", New Object() {nv, w}, Me.UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCompleted(Me, New UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOrdinals", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOrdinals(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal n() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal d() As Byte) As Integer
            Dim results() As Object = Me.Invoke("UpdateOrdinals", New Object() {n, d})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOrdinalsAsync(ByVal n() As Byte, ByVal d() As Byte)
            Me.UpdateOrdinalsAsync(n, d, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOrdinalsAsync(ByVal n() As Byte, ByVal d() As Byte, ByVal userState As Object)
            If (Me.UpdateOrdinalsOperationCompleted Is Nothing) Then
                Me.UpdateOrdinalsOperationCompleted = AddressOf Me.OnUpdateOrdinalsOperationCompleted
            End If
            Me.InvokeAsync("UpdateOrdinals", New Object() {n, d}, Me.UpdateOrdinalsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOrdinalsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOrdinalsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOrdinalsCompleted(Me, New UpdateOrdinalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Paging", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Paging(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Paging", New Object() {data})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub PagingAsync(ByVal data() As Byte)
            Me.PagingAsync(data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PagingAsync(ByVal data() As Byte, ByVal userState As Object)
            If (Me.PagingOperationCompleted Is Nothing) Then
                Me.PagingOperationCompleted = AddressOf Me.OnPagingOperationCompleted
            End If
            Me.InvokeAsync("Paging", New Object() {data}, Me.PagingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPagingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PagingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PagingCompleted(Me, New PagingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PagingWithFilters", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PagingWithFilters(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("PagingWithFilters", New Object() {data})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub PagingWithFiltersAsync(ByVal data() As Byte)
            Me.PagingWithFiltersAsync(data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PagingWithFiltersAsync(ByVal data() As Byte, ByVal userState As Object)
            If (Me.PagingWithFiltersOperationCompleted Is Nothing) Then
                Me.PagingWithFiltersOperationCompleted = AddressOf Me.OnPagingWithFiltersOperationCompleted
            End If
            Me.InvokeAsync("PagingWithFilters", New Object() {data}, Me.PagingWithFiltersOperationCompleted, userState)
        End Sub
        
        Private Sub OnPagingWithFiltersOperationCompleted(ByVal arg As Object)
            If (Not (Me.PagingWithFiltersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PagingWithFiltersCompleted(Me, New PagingWithFiltersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BulkSelect", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BulkSelect(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("BulkSelect", New Object() {data})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub BulkSelectAsync(ByVal data() As Byte)
            Me.BulkSelectAsync(data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BulkSelectAsync(ByVal data() As Byte, ByVal userState As Object)
            If (Me.BulkSelectOperationCompleted Is Nothing) Then
                Me.BulkSelectOperationCompleted = AddressOf Me.OnBulkSelectOperationCompleted
            End If
            Me.InvokeAsync("BulkSelect", New Object() {data}, Me.BulkSelectOperationCompleted, userState)
        End Sub
        
        Private Sub OnBulkSelectOperationCompleted(ByVal arg As Object)
            If (Not (Me.BulkSelectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BulkSelectCompleted(Me, New BulkSelectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ExecuteDatasetCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteDatasetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteDatasetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ExecuteScalarCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteScalarCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteScalarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ExecuteNonQueryCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteNonQueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteNonQueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SqlToListAllTablesCompletedEventHandler(ByVal sender As Object, ByVal e As SqlToListAllTablesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SqlToListAllTablesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AllTableNamesCompletedEventHandler(ByVal sender As Object, ByVal e As AllTableNamesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllTableNamesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub BulkSaveDeleteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub InsertCompletedEventHandler(ByVal sender As Object, ByVal e As InsertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SelectCompletedEventHandler(ByVal sender As Object, ByVal e As SelectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub SelectCountCompletedEventHandler(ByVal sender As Object, ByVal e As SelectCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateOrdinalsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOrdinalsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOrdinalsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PagingCompletedEventHandler(ByVal sender As Object, ByVal e As PagingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PagingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub PagingWithFiltersCompletedEventHandler(ByVal sender As Object, ByVal e As PagingWithFiltersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PagingWithFiltersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub BulkSelectCompletedEventHandler(ByVal sender As Object, ByVal e As BulkSelectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BulkSelectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
End Namespace
