using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Collections.Generic;

using Framework;

namespace SchemaDeploy
{
    //Table-Mapping Class (Customisable half)
    public partial class CRelease
    {
        #region Constants
        #endregion

        #region Constructors (Public)
        //Default Connection String
        public CRelease() : base() { }

        //Alternative Connection String
        public CRelease(CDataSrc dataSrc) : base(dataSrc) { }

        //Hidden  (UI code should use cache instead)
        protected internal CRelease(int releaseId) : base(releaseId) { }
        protected internal CRelease(CDataSrc dataSrc, int releaseId) : base(dataSrc, releaseId) { }
        protected internal CRelease(CDataSrc dataSrc, int releaseId, IDbTransaction txOrNull) : base(dataSrc, releaseId, txOrNull) { }
        #endregion

        #region Default Values
        protected override void InitValues_Custom()
        {
            //_sampleDateCreated = DateTime.Now;
            //_sampleSortOrder   = 0;
        }
        #endregion

        #region Default Connection String
        protected override CDataSrc DefaultDataSrc() { return CDataSrc.Default; }
        #endregion

        #region Properties - Relationships
        //Relationships - Foriegn Keys (e.g parent)

        //Relationships - Collections (e.g. children)
        #endregion

        #region Properties - Customisation
        //Derived/ReadOnly (e.g. xml classes, presentation logic)
        #endregion

        #region Save/Delete Overrides
        //Can Override base.Save/Delete (e.g. Cascade deletes, or insert related records)
        #endregion

        #region Custom Database Queries
        //(Not normally required for cached classes, use list class for searching etc)
        //For Stored Procs can use: MakeList (matching schema), or DataSrc.ExecuteDataset (reports etc)
        //For Dynamic sql, can use: SelectSum, SelectDistinct, SelectCount, SelectWhere (inherited methods)
        public CReleaseList SelectByAppId_MainOnly(int appId, IDbTransaction tx)
        {
            return SelectWhere(new CCriteriaList("ReleaseAppId", appId, "ReleaseInstanceId", int.MinValue), tx);
        }
        #endregion

        #region Searching (Optional)
        //For cached classes, custom seach logic resides in static methods on the list class
        // e.g. CRelease.Cache.Search("...")

        //See also the auto-generated methods based on indexes
        //' e.g. CRelease.Cache.GetBy...
        #endregion

        #region Caching Details
        //Cache Key
        internal static string CACHE_KEY = typeof(CRelease).ToString();    //TABLE_NAME

        //Cache data
        private static CReleaseList LoadCache()  {   return new CRelease().SelectAll();   }
        //Cache Timeout
        private static void SetCache(CReleaseList value)
        {
            if (null != value)  
                value.Sort(); 
            CCache.Set(CACHE_KEY, value);    //Optional parameter can override timeout (otherwise uses config-settings, which default to 3hrs)
        }
        //Helper Method
        private CRelease CacheGetById(CReleaseList list)  { return list.GetById(this.ReleaseId);    }
        #endregion

        #region Cloning
        public CRelease Clone(CDataSrc target, IDbTransaction txOrNull) //, int parentId)
        {
            //Shallow copy: Copies the immediate record, excluding autogenerated Pks
            CRelease copy = new CRelease(this, target);

            //Deep Copy - Child Entities: Cloned children must reference their cloned parent
            //copy.SampleParentId = parentId;

            copy.Save(txOrNull);

            //Deep Copy - Parent Entities: Cloned parents also clone their child collections
            //this.Children.Clone(target, txOrNull, copy.ReleaseId);

            return copy;
        }
        #endregion

        #region ToXml
        protected override void ToXml_Custom(System.Xml.XmlWriter w)
        {
            //Store(w, "Example", this.Example)
        }
        #endregion
    }
}