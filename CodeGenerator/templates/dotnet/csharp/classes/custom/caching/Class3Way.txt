using System;
using System.Text;
using System.Data;
using System.Collections;
using System.Collections.Generic;

using Framework;

namespace [NameSpace]
{
    //Table-Mapping Class (Customisable half)
    public partial class [ClassName]
    {
        #region Constants
        #endregion

        #region Constructors (Public)
        //Default Connection String
        public [ClassName]() : base() {}

        //Alternative Connection String
        public [ClassName](CDataSrc dataSrc) : base(dataSrc) {}

        //Hidden  (UI code should use cache instead)
        protected internal [ClassName]([PrimaryKeyObjectType] [PrimaryKeyNameCamelCase], [SecondaryKeyObjectType] [SecondaryKeyNameCamelCase], [TertiaryKeyObjectType] [TertiaryKeyNameCamelCase]) : base([PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase],[TertiaryKeyNameCamelCase]) {}
        protected internal [ClassName](CDataSrc dataSrc, [PrimaryKeyObjectType] [PrimaryKeyNameCamelCase], [SecondaryKeyObjectType] [SecondaryKeyNameCamelCase], [TertiaryKeyObjectType] [TertiaryKeyNameCamelCase]) : base(dataSrc, [PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase], [TertiaryKeyNameCamelCase]) {}
        protected internal [ClassName](CDataSrc dataSrc, [PrimaryKeyObjectType] [PrimaryKeyNameCamelCase], [SecondaryKeyObjectType] [SecondaryKeyNameCamelCase], [TertiaryKeyObjectType] [TertiaryKeyNameCamelCase], IDbTransaction txOrNull) : base(dataSrc, [PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase], [TertiaryKeyNameCamelCase], txOrNull) { }
        #endregion

        #region Default Values
        protected override void InitValues_Custom()
        {
            //_sampleDateCreated = DateTime.Now;
            //_sampleSortOrder   = 0;
        }
        #endregion
        
        #region Default Connection String
        protected override CDataSrc DefaultDataSrc()  { return CDataSrc.Default;  }
        #endregion

        #region Properties - Relationships
        //Relationships - Foriegn Keys (e.g parent)

        //Relationships - Collections (e.g. children)
        #endregion

        #region Properties - Customisation
        //Derived/ReadOnly (e.g. xml classes, presentation logic)
        #endregion

        #region Save/Delete Overrides
        //Can Override base.Save/Delete (e.g. Cascade deletes, or insert related records)
        #endregion

        #region Custom Database Queries
        //(Not normally required for cached classes, use list class for searching etc)
        //For Stored Procs can use: MakeList (matching schema), or DataSrc.ExecuteDataset (reports etc)
        //For Dynamic sql, can use: SelectSum, SelectDistinct, SelectCount, SelectWhere (inherited methods)
        #endregion

[Search]

        #region Caching Details
        //Cache Key
        internal static string CACHE_KEY = typeof([ClassName]).ToString();    //TABLE_NAME

        //Cache data
        private static [ClassName]List LoadCache()
        {
            return new [ClassName]().SelectAll();
        }
        //Cache Timeout
        private static void SetCache([ClassName]List value)
        {
            if (null != value) 
                value.Sort(); 
            CCache.Set(CACHE_KEY, value);    //Optional parameter can override timeout (otherwise uses config-settings, which default to 3hrs)
        }
        //Helper Method
        private [ClassName] CacheGetById([ClassName]List list)
        {
           return list.GetById(this.[PrimaryKeyNameProperCase], this.[SecondaryKeyNameProperCase], this.[TertiaryKeyNameProperCase]);
        }
        #endregion

        #region Cloning
        public [ClassName] Clone(CDataSrc target, IDbTransaction txOrNull) //, int parentId)
        {
            //Shallow copy: Copies the immediate record, excluding autogenerated Pks
            [ClassName] copy = new [ClassName](this, target);

            //Deep Copy - Child Entities: Cloned children must reference their cloned parent
            //copy.SampleParentId = parentId;

            copy.Save(txOrNull);

            //Deep Copy - Parent Entities: Cloned parents also clone their child collections
            //this.Children.Clone(target, txOrNull, copy.[PrimaryKeyNameProperCase]);

            return copy;
        }
        #endregion

        #region ToXml
        protected override void ToXml_Custom(System.Xml.XmlWriter w)
        {
            //Store(w, "Example", this.Example)
        }
        #endregion
    }
}
