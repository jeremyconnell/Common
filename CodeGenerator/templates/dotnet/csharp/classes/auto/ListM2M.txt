using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;

using Framework;

namespace [NameSpace]
{
    [Serializable()]
    public partial class [ClassName]List : List<[ClassName]>
    {
        #region Constructors
        //Basic constructor
        public [ClassName]List() : base() {}
       
        //More efficient memory-allocation if size is known
        public [ClassName]List(int capacity) : base(capacity) {}
        
        //Shares the index (if its already been computed)
        public [ClassName]List([ClassName]List list) : base(list.Count)
        {
            foreach ([ClassName] i in list)
                base.Add(i);
        }

        //Generic list (eg. from paging control), have to assume type
        public [ClassName]List(IList list) : base(list.Count)
        {
            foreach ([ClassName] i in list)
                base.Add(i);
        }
        #endregion

[SaveAllDeleteAll]
        
        #region Cache-Control
        public new void Add([ClassName] item)
        {
            if (null != _index)
            {
                string k = Key(item.[PrimaryKeyNameProperCase], item.[SecondaryKeyNameProperCase]);
                if (! _index.ContainsKey(k))
                    _index[k] = item;
            }
            base.Add(item);
        }
        public new void Remove([ClassName] item)
        {
            if (null != _index)
            {
                string k = Key(item.[PrimaryKeyNameProperCase], item.[SecondaryKeyNameProperCase]);
                if (_index.ContainsKey(k))
                    _index.Remove(k);
            }
            base.Remove(item);
        }
    
        //Supplementary List Overloads
        public void Add(   IList<[ClassName]> itemsToAdd)    {   foreach ([ClassName] i in itemsToAdd)   { Add(   i); }   }
        public void Remove(IList<[ClassName]> itemsToRemove) {   foreach ([ClassName] i in itemsToRemove){ Remove(i); }   }
        #endregion  

        #region Main Index (on [PrimaryKeyNameProperCase], [SecondaryKeyNameProperCase])
        public [ClassName] GetById([PrimaryKeyObjectType] [PrimaryKeyNameCamelCase], [SecondaryKeyObjectType] [SecondaryKeyNameCamelCase])
        {
            [ClassName] c = null;
            string k = Key([PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase]);
            Index.TryGetValue(k, out c);
            return c;
        }
        public static string Key([PrimaryKeyObjectType] [PrimaryKeyNameCamelCase], [SecondaryKeyObjectType] [SecondaryKeyNameCamelCase])
        {
            return String.Concat([PrimaryKeyNameCamelCase], "_", [SecondaryKeyNameCamelCase]);
        }

        [NonSerialized]
        private Dictionary<string,[ClassName]> _index;
        private Dictionary<string,[ClassName]> Index
        {
            get    
            {
                if (null != _index)
                    if (_index.Count == this.Count)
                        return _index;

                _index = new Dictionary<string,[ClassName]>(this.Count);
                foreach ([ClassName] i in this)
                    _index[ Key(i.[PrimaryKeyNameProperCase], i.[SecondaryKeyNameProperCase]) ] = i;
                return _index;
             }
        }
        #endregion
            
        #region Foreign-Key Indices (Subsets)
[CustomIndices]
        #endregion

[GenericSorting][MoveUpDown]
    }
}