Imports System
Imports System.Text
Imports System.Data
Imports System.Collections.Generic

Imports Framework


'Table-Row Class (Customisable half)
Partial Public Class [ClassName]

#Region "Constants"
#End Region

#Region "Constructors (Public)"
    'Default Connection String
    Public Sub New()
        MyBase.New()
    End Sub
    Public Sub New([PrimaryKeyNameCamelCase] As [PrimaryKeyObjectType], [SecondaryKeyNameCamelCase] As [SecondaryKeyObjectType])
        MyBase.New([PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase])
    End Sub
    
    'Alternative Connection String
    Public Sub New(ByVal dataSrc As CDataSrc)
        MyBase.New(dataSrc)
    End Sub
    Public Sub New(ByVal dataSrc As CDataSrc, [PrimaryKeyNameCamelCase] As [PrimaryKeyObjectType], [SecondaryKeyNameCamelCase] As [SecondaryKeyObjectType])
        MyBase.New(dataSrc, [PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase])
    End Sub

    'Transactional (shares an open connection)
    Protected Friend Sub New(ByVal dataSrc As CDataSrc, ByVal [PrimaryKeyNameCamelCase] As [PrimaryKeyObjectType], [SecondaryKeyNameCamelCase] As [SecondaryKeyObjectType], ByVal txOrNull As IDbTransaction)
        MyBase.New(dataSrc, [PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase], txOrNull)
    End Sub
#End Region

#Region "Default Values"
    Protected Overrides Sub InitValues_Custom()
        'Custom default values (e.g. DateCreated column)
        
        'Member variables (e.g. for child collections)
        
    End Sub
#End Region

#Region "Default Connection String"
    Protected Overrides Function DefaultDataSrc() As CDataSrc
        Return CDataSrc.Default
    End Function
#End Region

#Region "Members"
    'Foreign Keys   

    'Child Collections  

    'Xml Data (as high-level objects)

#End Region

#Region "Properties - Relationships"    
    'Relationships - Foriegn Keys (e.g parent)

    'Relationships - Collections (e.g. children)

#End Region

#Region "Properties - Customisation"
    'Derived/ReadOnly (e.g. xml classes, presentation logic)
    
#End Region

#Region "Save/Delete Overrides"
     'Can Override MyBase.Save/Delete (e.g. Cascade deletes, or insert related records)
#End Region

#Region "Custom Database Queries"
    'For Stored Procs can use: MakeListTyped (matching schema), or DataSrc.ExecuteDataset (reports etc)
    'For Dynamic sql, can use: SelectSum, SelectDistinct, SelectCount, SelectWhere (inherited methods)
    '                see also: SelectBy[FK], Search and Count (auto-generated sample queries)
#End Region

#Region "Cloning"
    Public Function Clone(target as CDataSrc, txOrNull as IDbTransaction) As [ClassName] ', parentId As Integer) As [ClassName]
        'Shallow copy: Copies the immediate record, excluding autogenerated Pks
        Dim copy As New [ClassName](Me, target)

        'Deep Copy - Child Entities: Cloned children must reference their cloned parent
        'copy.SampleParentId = parentId

        copy.Save(txOrNull)

        'Deep Copy - Parent Entities: Cloned parents also clone their child collections
        'Me.Children.Clone(target, txOrNull, copy.[PrimaryKeyNameProperCase])

        Return copy
    End Function
#End Region

#Region "ToXml"
    Protected Overrides Sub ToXml_Custom(ByVal w As System.Xml.XmlWriter)
        'Store(w, "Example", Me.Example)
    End Sub
#End Region

End Class
