Imports System
Imports System.Data
Imports System.Collections.Generic

Imports Framework

<Serializable(), CLSCompliant(True)> _
Partial Public Class [ClassName]List : Inherits List(Of [ClassName])

#Region "Constructors"
    'Basic constructor
    Public Sub New()
        MyBase.New()  
    End Sub
    
    'More efficient memory-allocation if size is known
    Public Sub New(ByVal capacity As Integer)
        MyBase.New(capacity)  
    End Sub
    
    'Shares the index (if its already been computed)
    Public Sub New(ByVal list As [ClassName]List)
        MyBase.New(list)
        _index = list._index 
    End Sub

    'Generic list (eg. from paging control), have to assume type
    Public Sub New(ByVal list As IList)
        MyBase.New(list.Count)
        For Each i As [ClassName] In list
            MyBase.Add(i)
        Next
    End Sub
#End Region

[SaveAllDeleteAll]

#Region "Cache-Control"
    'Main Logic
    Public Shadows Sub Add(ByVal item As [ClassName])
        If Not IsNothing(_index) Then
            Dim k As String = Key(item.[PrimaryKeyNameProperCase], item.[SecondaryKeyNameProperCase], item.[TertiaryKeyNameProperCase])
            If Not _index.ContainsKey(k) Then
                _index(k) = item
            End If
        End If
        MyBase.Add(item)
    End Sub
    Public Shadows Sub Remove(ByVal item As [ClassName])
        If Not IsNothing(_index) Then
            Dim k As String = Key(item.[PrimaryKeyNameProperCase], item.[SecondaryKeyNameProperCase], item.[TertiaryKeyNameProperCase])
            If _index.ContainsKey(k) Then
                _index.Remove(k)
            End If
        End If
        MyBase.Remove(item)
    End Sub
    
    'Supplementary List Overloads
    Public Shadows Sub Add(ByVal itemsToAdd As IList(Of [ClassName]))
        For Each i As [ClassName] In itemsToAdd
            Add(i)
        Next
    End Sub
    Public Shadows Sub Remove(ByVal itemsToRemove As IList(Of [ClassName]))
        For Each i As [ClassName] In itemsToRemove
            Remove(i)
        Next
    End Sub
#End Region

#Region "Main Index (on [PrimaryKeyNameProperCase], [SecondaryKeyNameProperCase], [TertiaryKeyNameProperCase])
    Default Public Overloads ReadOnly Property Item(ByVal [PrimaryKeyNameCamelCase] As [PrimaryKeyObjectType], ByVal [SecondaryKeyNameCamelCase] As [SecondaryKeyObjectType], ByVal [TertiaryKeyNameCamelCase] As [TertiaryKeyObjectType]) As [ClassName]
        Get
            Return GetById([PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase], [TertiaryKeyNameCamelCase])
        End Get
    End Property
    Public Shared Function Key(ByVal [PrimaryKeyNameCamelCase] As [PrimaryKeyObjectType], ByVal [SecondaryKeyNameCamelCase] As [SecondaryKeyObjectType], ByVal [TertiaryKeyNameCamelCase] As [TertiaryKeyObjectType]) As String
        Return [PrimaryKeyNameCamelCase].ToString() + "_" + [SecondaryKeyNameCamelCase].ToString() + "_" + [TertiaryKeyNameProperCase].ToString()
    End Function
    Public Function GetById(ByVal [PrimaryKeyNameCamelCase] As [PrimaryKeyObjectType], ByVal [SecondaryKeyNameCamelCase] As [SecondaryKeyObjectType], ByVal [TertiaryKeyNameCamelCase] As [TertiaryKeyObjectType]) As [ClassName]
        Dim c As [ClassName] = Nothing
        Dim k As String = Key([PrimaryKeyNameCamelCase], [SecondaryKeyNameCamelCase], [TertiaryKeyNameCamelCase])
        Index.TryGetValue(k, c)
        Return c
    End Function
    <NonSerialized()> _
    Private _index As Dictionary(Of String, [ClassName])
    Private ReadOnly Property Index As Dictionary(Of String, [ClassName])
        Get
            If Not IsNothing(_index) Then
                If _index.Count = Me.Count Then
                    Return _Index
                End If
            End If

            _index = New Dictionary(Of String, [ClassName])(Me.Count)
            For Each i As [ClassName] in Me
                _index(Key(i.[PrimaryKeyNameProperCase], i.[SecondaryKeyNameProperCase], i.[TertiaryKeyNameProperCase])) = i
            Next    
            Return _index
        End Get
    End Property
#End Region
    
#Region "Foreign-Key Indices (Subsets)
[CustomIndices]#End Region

[GenericSorting][MoveUpDown]End Class
